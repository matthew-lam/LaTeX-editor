import os, sys, platformfrom PyQt5.QtWidgets import QApplication, QWidget, QDesktopWidget, QMainWindow, QAction, qApp, QTextEdit, QDockWidget, QFileDialogfrom PyQt5.QtCore import QDate, QFile, Qt, QTextStreamfrom PyQt5.QtGui import QIcon#mainWindow class used for creating larger main window objects in the application (e.g. text editor, LaTeX view, etc.)class mainWindow(QMainWindow):    #Initializes an instance of mainWindow and QMainWindow class    def __init__(self):        super().__init__()        self.setCurrentFile('')        self.initUI()    def initUI(self):        #Setting properties for the newly initialized window (object)        self.setWindowTitle('LaTeX editor')        screenDims = self.getScreenDims()        screenX = self.getScreenSizeX(screenDims)        screenY = self.getScreenSizeY(screenDims)        self.setTopLeft()        self.resize(screenX/2, screenY/1.25)        self.init_menuBar()        self.footerBar_init()        self.leftDock_sideBar()        self.mainActivity_init()        self.toolBar_init()        self.show()    def getScreenDims(self):        screenObj = app.primaryScreen()        screenSize = screenObj.size()        screenDims = screenObj.availableGeometry()        return screenDims    def getScreenSizeX(self, screenDims):        return screenDims.width()    def getScreenSizeY(self, screenDims):        return screenDims.height()    #Ensures that window is always centered no matter the screen res    def setCenter(self):        windowProp = self.frameGeometry()        centerPosition = QDesktopWidget().availableGeometry().center()        windowProp.moveCenter(centerPosition)        self.move(windowProp.topLeft())    def setTopLeft(self):        #Ensures that window is always set to the top left no matter the screen res        windowProp = self.frameGeometry()        topLeftPosition = QDesktopWidget().availableGeometry().topLeft()        windowProp.moveLeft(0)        self.move(windowProp.topLeft())    def isMacOS(self):            try:            #Detects if OS is MacOS.                if (platform.system() == "Darwin"):                    print(platform.system() + " -- OS used is MacOS.")                    return True            except:                return False    def init_menuBar(self):        menuBar = self.menuBar()        fileMenu = menuBar.addMenu('&File')        newFile_fileMenu = fileMenu.addAction('&New File')        newFile_fileMenu.setShortcut('CTRL+N')        newFile_fileMenu.triggered.connect(self.newFile_action)        openFile_fileMenu = fileMenu.addAction('&Open document...')        openFile_fileMenu.setShortcut('CTRL+O')        openFile_fileMenu.triggered.connect(self.openFile_action)        save_fileMenu = fileMenu.addAction('&Save')        save_fileMenu.setShortcut('CTRL+S')        saveAs_fileMenu = fileMenu.addAction('&Save as...')        saveAs_fileMenu.setShortcut('CTRL+SHIFT+S')        editMenu = menuBar.addMenu('&Edit')        edit_Test = editMenu.addAction('Filler 1')        viewMenu = menuBar.addMenu('&View')        view_Test = viewMenu.addMenu('Filler 2')        windowMenu = menuBar.addMenu('&Window')        window_Test = windowMenu.addMenu('Filler 3')        helpMenu = menuBar.addMenu('&Help')        help_Test = helpMenu.addMenu('Filler 4')        self.show()    def footerBar_init(self):        #May need to create an instance of statusBar in this function to add more widgets if needed.        self.statusBar().showMessage('LaTeX editor booted up!', 2000)        self.show()                def toolBar_init(self):        self.toolbar = self.addToolBar('Toolbar')        self.toolbar.setMovable(False)        self.toolbar.setMinimumSize(0,40)        self.openFile = QAction(QIcon('Assets/Icons/of_Icon.png'), '&Open file', self)        self.openFile.setShortcut('CTRL+O')        self.openFile.triggered.connect(self.openFile_action)        self.toolbar.addAction(self.openFile)        self.saveFile = QAction(QIcon('Assets/Icons/sf_Icon.png'), '&Save file', self)        self.saveFile.setShortcut('CTRL+S')        self.saveFile.triggered.connect(self.saveFile_action)        self.toolbar.addAction(self.saveFile)        self.newFile = QAction(QIcon('Assets/Icons/nf_Icon.png'), '&New file', self)        self.newFile.setShortcut('CTRL+N')        self.newFile.triggered.connect(self.newFile_action)        self.toolbar.addAction(self.newFile)        self.show()    def newFile_action(self):        super().__init__()        self.setCurrentFile('')        self.initUI()                self.statusBar().showMessage('New window', 2000)    #Code adapted from https://github.com/baoboa/pyqt5/blob/master/examples/mainwindows/recentfiles.py    ###Start    def openFile_action(self):        fileName, _ = QFileDialog.getOpenFileName(self)        if fileName:            self.loadFile(fileName)    def saveFile_action(self):        if self.currentFile:            self.save(self.currentFile)        else:            self.saveAs()    def saveAs(self):        fileName, _ = QFileDialog.getSaveFileName(self)        if fileName:            self.saveFile(fileName)    def save(self, fileName):        file = QFile(fileName)        if not file.open( QFile.WriteOnly | QFile.Text):            QMessageBox.warning(self, "Recent Files",                    "Cannot write file %s:\n%s." % (fileName, file.errorString()))            return        outstr = QTextStream(file)        QApplication.setOverrideCursor(Qt.WaitCursor)        outstr << self.text.toPlainText()        QApplication.restoreOverrideCursor()        self.setCurrentFile(fileName)        self.statusBar().showMessage("File saved", 2000)    def setCurrentFile(self, fileName):        self.currentFile = fileName        if self.currentFile:            self.setWindowTitle(fileName)        else:            self.setWindowTitle("LaTeX editor")    def loadFile(self, fileName):        file = QFile(fileName)        if not file.open( QFile.ReadOnly | QFile.Text):            QMessageBox.warning(self, "Recent Files",                    "Cannot read file %s:\n%s." % (fileName, file.errorString()))            return        instr = QTextStream(file)        QApplication.setOverrideCursor(Qt.WaitCursor)        self.text.setPlainText(instr.readAll())        QApplication.restoreOverrideCursor()        self.setCurrentFile(fileName)        self.statusBar().showMessage("File loaded", 2000)    ###End    def mainActivity_init(self):        #Initializes an editable text box and sets it as the central widget to cover the whole window.        self.text = QTextEdit(self)        self.setCentralWidget(self.text)    def leftDock_sideBar(self):        #Initializes a dock widget to be used as a side bar.        dock = QDockWidget("LaTeX symbols and actions", self)        dock.setAllowedAreas(Qt.LeftDockWidgetArea)        #dock.setFeatures(QDockWidget.DockWidgetClosable)        dock.setFeatures(QDockWidget.NoDockWidgetFeatures)        dock.setMinimumSize(200, 0)        self.addDockWidget(Qt.LeftDockWidgetArea, dock)#Put this block of code into a main file. mainWindow() is used as a constructor for creating windows.if __name__ == '__main__':    #Application main loop for event handling and continuous running of application.    app = QApplication(sys.argv)    testWindow = mainWindow()    sys.exit(app.exec_())