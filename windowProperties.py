import os, sys, platformfrom PyQt5.QtWidgets import QApplication, QWidget, QDesktopWidget, QMainWindow, QAction, qApp#TODO: menu bar (and sub menus), footer bar (status), toolbar with icons for user functionality.#mainWindow class used for creating larger main window objects in the application (e.g. text editor, LaTeX view, etc.)class mainWindow(QMainWindow):    #Initializes an instance of mainWindow and QWidget class    def __init__(self):        super().__init__()        self.initUI()    #Setting properties for the newly initialized window (object)    def initUI(self):        self.setWindowTitle('LaTeX editor')        #self.resize(640, 480)        screenDims = self.getScreenDims()        screenX = self.getScreenSizeX(screenDims)        screenY = self.getScreenSizeY(screenDims)        self.setTopLeft()        self.resize(screenX/2, screenY/1.25)        self.menuBar_blank()        self.footerBar_init()        self.show()    def getScreenDims(self):        screenObj = app.primaryScreen()        screenSize = screenObj.size()        screenDims = screenObj.availableGeometry()        return screenDims    def getScreenSizeX(self, screenDims):        return screenDims.width()    def getScreenSizeY(self, screenDims):        return screenDims.height()    #Ensures that window is always centered no matter the screen res    def setCenter(self):        windowProp = self.frameGeometry()        centerPosition = QDesktopWidget().availableGeometry().center()        windowProp.moveCenter(centerPosition)        self.move(windowProp.topLeft())    #Ensures that window is always set to the top left no matter the screen res    #Perhaps I can refactor code to make it more concise? This will do for now.    def setTopLeft(self):        windowProp = self.frameGeometry()        topLeftPosition = QDesktopWidget().availableGeometry().topLeft()        windowProp.moveLeft(0)        self.move(windowProp.topLeft())    def menuBar_blank(self):        menuBar = self.menuBar()        try:            #Detects if OS is MacOS. If it is, then executes code to correctly display menu bar.            if (platform.system() == "Darwin"):                print(platform.system() + " -- OS used is MacOS.\nCommand ran: setNativeMenuBar(False)")                menuBar.setNativeMenuBar(False)        except:            pass        fileMenu = menuBar.addMenu('&File')        self.show()    def footerBar_init(self):        #May need to create an instance of statusBar in this function to add more widgets if needed.        self.statusBar().showMessage('')        self.show()    #Needs figuring out later. Used for showing current status of applicatio.    def footerBar_reDraw(self, textShown):        self.statusBar().showMessage(textShown)        self.show()#Put this block of code into a main file.if __name__ == '__main__':    #Application main loop for event handling and continuous running of application.    app = QApplication(sys.argv)    testWindow = mainWindow()    sys.exit(app.exec_())